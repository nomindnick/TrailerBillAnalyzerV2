Text generation and prompting
Learn how to prompt a model to generate text.

With the OpenAI API, you can use a large language model to generate text from a prompt, as you might using ChatGPT. Models can generate almost any kind of text responseâ€”like code, mathematical equations, structured JSON data, or human-like prose.

Here's a simple example using the Chat Completions API.
Generate text from a simple prompt

from openai import OpenAI
client = OpenAI()

completion = client.chat.completions.create(
    model="gpt-4o",
    messages=[
        {
            "role": "user",
            "content": "Write a one-sentence bedtime story about a unicorn."
        }
    ]
)

print(completion.choices[0].message.content)

An array of content generated by the model is in the choices property of the response. In this simple example, we have just one output which looks like this:

[
    {
        "index": 0,
        "message": {
            "role": "assistant",
            "content": "Under the soft glow of the moon, Luna the unicorn danced through fields of twinkling stardust, leaving trails of dreams for every child asleep.",
            "refusal": null
        },
        "logprobs": null,
        "finish_reason": "stop"
    }
]

In addition to plain text, you can also have the model return structured data in JSON format - this feature is called Structured Outputs.
Message roles and instruction following

You can provide instructions (prompts) to the model with differing levels of authority using message roles.
Generate text with messages using different roles

from openai import OpenAI
client = OpenAI()

completion = client.chat.completions.create(
    model="gpt-4o",
    messages=[
        {
            "role": "developer",
            "content": "Talk like a pirate."
        },
        {
            "role": "user",
            "content": "Are semicolons optional in JavaScript?"
        }
    ]
)

print(completion.choices[0].message.content)

The OpenAI model spec describes how our models give different levels of priority to messages with different roles.
developer	user	assistant
developer messages are instructions provided by the application developer, weighted ahead of user messages.	user messages are instructions provided by an end user, weighted behind developer messages.	Messages generated by the model have the assistant role.

A multi-turn conversation may consist of several messages of these types, along with other content types provided by both you and the model. Learn more about managing conversation state here.